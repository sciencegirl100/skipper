const { google } = require('googleapis');
const fs = require('fs');
const creds = JSON.parse(fs.readFileSync('creds.json'));
const nodemailer = require('nodemailer');

// Handle Command Options
if(process.argv.length > 3){
    var runHelp = false;
    for(var i=0; i<process.argv.length; i++){
        switch(process.argv[i]){
            case "--check-connection":
                console.log("Check connection...");
                break;
            default:
                    runHelp = true;
                break;
        }
    }
    if(runHelp){
        console.log("Help is not implemented yet");
        console.log(JSON.stringify(process.argv));
    }
    process.exit();
}

var transporter = nodemailer.createTransport({
    host: creds.mail.server,
    port: creds.mail.port,
    secure: (creds.mail.port==465),
    auth: {
        user: creds.mail.user,
        pass: creds.mail.pass,
    },
});


var times = new Array();
/* Example:                          V Or total hours
["0815", "1600", "0000", "0000", "holiday"],
["0755", "1355", "1455", "1655", "holiday"],
["0724", "1500", "0000", "0000", "holiday"],
["0906", "1700", "0000", "0000", "holiday"],
["0000", "0000", "0000", "0000", "holiday"],
["0000", "0000", "0000", "0000", "holiday"],
["0000", "0000", "0000", "0000", "holiday"]
*/
var totalTime = 0; // Ideally 40.00 hours per week

const days = [ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" ];

function getLastMonday() {
    var date = new Date();
    var day = date.getDay();
    var prevMonday = new Date();
    if(date.getDay() == 0){
        prevMonday.setDate(date.getDate() - 7);
    }
    else{
        prevMonday.setDate(date.getDate() - (day-1));
    }

    return prevMonday;
}

async function ProcessSheet(){
    const auth = await new google.auth.GoogleAuth({
        keyFile: creds.API_CRED_FILE,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'] 
    });
    const sheets = google.sheets({ version: 'v4', auth });
    // In and Out times
    var inOutResp = await sheets.spreadsheets.values.get({
        spreadsheetId: creds.SHEET_ID,
        range: 'Current!B2:E8',
    });
    times = inOutResp.data.values;
    // Vacation / Sick / Holidays
    var response = await sheets.spreadsheets.values.get({
        spreadsheetId: creds.SHEET_ID,
        range: 'Current!G2:I8',
    });
    for(var i=0; i<response.data.values.length; i++){
        if(response.data.values[i][2] == "TRUE"){
            // Holiday
            times[i].push("Holiday");
        }else if(response.data.values[i][1] == "TRUE"){
            // Sick day
            times[i].push("Sick");
        }else if(response.data.values[i][0] == "TRUE"){
            // Vacation day
            times[i].push("Vacation");
        }
    }
    // Daily Totals
    var dailyResp = await sheets.spreadsheets.values.get({
        spreadsheetId: creds.SHEET_ID,
        range: '\'System Current\'!I12:I18',
    });
    for( var i=0; i<dailyResp.data.values.length; i++){
        // Append total time (BTW this was generated by Copilot)
        // totalTime += dailyResp.data.values[i][0];
        totalTime += parseFloat(dailyResp.data.values[i][0]);
        if(typeof times[i][4] == 'undefined'){
            times[i].push(dailyResp.data.values[i][0]);
        }
    }
    // Build Email
    var email = fs.readFileSync('email.html');
    email = email.toString();
    email = email.replace('%WeekStart%', getLastMonday().toISOString().substring(0, 10));
    email = email.replace('%total%', totalTime.toString());
    // add days
    const dayTemplate = fs.readFileSync('dayTemplate.html');
    var dayTimes = "";
    for(var i=0; i<days.length; i++){
        var dayBuilder = dayTemplate.toString();
        dayBuilder = dayBuilder.replace('%dayName%', days[i]);
        dayBuilder = dayBuilder.replace('%timeInA%', times[i][0]);
        dayBuilder = dayBuilder.replace('%timeOutA%', times[i][1]);
        dayBuilder = dayBuilder.replace('%timeInB%', times[i][2]);
        dayBuilder = dayBuilder.replace('%timeOutB%', times[i][3]);
        dayBuilder = dayBuilder.replace('%total%', times[i][4]);
        dayBuilder += "\n";
        dayTimes += dayBuilder;
    }
    email = email.replace('%Times%', dayTimes);
    // Update Google Sheet
    var updateTimes = await sheets.spreadsheets.values.update({
        spreadsheetId: creds.SHEET_ID,
        range: 'Current!B2:F8',
        valueInputOption: 'RAW',
        includeValuesInResponse: false,
        requestBody: {
            range: "Current!B2:F8",
            majorDimension: "ROWS",
            values: [
                ["0000","0000","0000","0000","0000"],
                ["0000","0000","0000","0000","0000"],
                ["0000","0000","0000","0000","0000"],
                ["0000","0000","0000","0000","0000"],
                ["0000","0000","0000","0000","0000"],
                ["0000","0000","0000","0000","0000"],
                ["0000","0000","0000","0000","0000"]
            ]
        }
    });
    var updateOffDays = await sheets.spreadsheets.values.update({
        spreadsheetId: creds.SHEET_ID,
        range: 'Current!G2:I6',
        valueInputOption: 'USER_ENTERED',
        includeValuesInResponse: false,
        requestBody: {
            range: "Current!G2:I6",
            majorDimension: "ROWS",
            values: [
                [false, false, false],
                [false, false, false],
                [false, false, false],
                [false, false, false],
                [false, false, false]
            ]
        }
    });
    var appendLog = await sheets.spreadsheets.values.append({
        spreadsheetId: creds.SHEET_ID,
        range: 'LOG!A:I',
        valueInputOption: 'USER_ENTERED',
        includeValuesInResponse: false,
        insertDataOption: 'INSERT_ROWS',
        requestBody: {
            majorDimension: 'ROWS',
            values: [
                // week start, monday... sunday, total
                [
                    getLastMonday().toISOString().substring(0, 10),
                    parseFloat(times[0][4]),     // Monday
                    parseFloat(times[1][4]),     // Tuesday
                    parseFloat(times[2][4]),     // Wednesday
                    parseFloat(times[3][4]),     // Thursday
                    parseFloat(times[4][4]),     // Friday
                    parseFloat(times[5][4]),     // Saturday
                    parseFloat(times[6][4]),     // Sunday
                    totalTime,     // Total
                ],
            ]
        }
    });
    // Send Email
    var mailInfo = await transporter.sendMail({
        from: creds.mail.from,
        to: creds.mail.sendTo,
        subject: creds.mail.subject,
        html: email
    });
    console.log("Sent!");
}

ProcessSheet();